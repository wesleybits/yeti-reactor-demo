module yeti.util.reactor;
import java.util.concurrent.atomic.AtomicReference;

import java.util.concurrent: 
            Semaphore, Executors, ExecutorService, TimeUnit,
            Callable;

import java.lang: 
            Runnable, Thread;

futurePool = Executors#newCachedThreadPool(); 
            // likely inappropriate.

/**
 * Group: Thread (easier multithreading for Yeti)
 * Creates an executor service with a fixed thread pool,
 * needed to use reactors.
 *
 * Arguments:
 * n - the size of the returned Executor thread pool
 */
pool n = Executors#newFixedThreadPool(n);

/**
 * Group: Thread
 * Kills all threads in a given pool, with the given 
 * timeout.
 *
 * Arguments:
 * ex - the pool to stop
 * timeout - the number of seconds you're willing to wait
 */
killAll ex timeout is ~ExecutorService -> number -> boolean =
   (_ = ex#shutdownNow();
    ex#awaitTermination(timeout, TimeUnit#SECONDS));

/**
 * Group: Thread
 * Kills all threads in the internal pool, waits 10 seconds 
 * before erring out.
 */
simplyKillAll = \(killAll futurePool 10);

/**
 * Group: Thread
 * This interrupts the current thread, useful for getting
 * a reactor to stop itself.
 */
interruptMyself = \(Thread#currentThread()#interrupt());

/**
 * Group: Thread (easier multithreading for Yeti)
 * Creates a simple atomic reference for lockless global 
 * mutability in a thread-safe way for simple values.
 *
 * Arguments:
 * init - the initial value of the atom
 *
 * Description:
 * This is most appropriately used if you need a simple, 
 * non-structured way of having a shared variabled 
 * several threads.  It is not appropriate for data 
 * structures, such as arrays or hashes.  For those, see
 * reference.
 */
atom init is 'a -> {var value is 'a}= 
   (ref = new AtomicReference(init unsafely_as ~Object);
    {
        get value () = ref#get() unsafely_as 'a,
        set value v  = ref#set(v unsafely_as ~Object),
    });

/**
 * Group: Thread
 * Creates a thread-safe mutable reference to a data 
 * structure via a copy-on-write locking policy.
 *
 * Arguments:
 * init - the initial value of the reference
 *
 * Description:
 * This creates a very safe way of sharing mutable 
 * data between threads in a synchronized manner.
 * It returns a struct with value and update members.
 * reference.value will give you a copy of whatever 
 * is safe to read at the time (references are copy-
 * on-write, so if some other thread is writing to 
 * it, you'll get to see what it was before the 
 * write started).  reference.update requires a 
 * function argument that will return the new value
 * of this reference, and it's the only way to 
 * set the reference's new value.
 *
 * Examples:
 * : ref = refernce ['foo':11, 'bar':22];
 * : ref.update do h: h.['baz'] := 33; h done;
 * : ref.value
 * : => ['foo':11, 'bar':22, 'baz':33] is hash<string, number>
 */
reference init 
    is map<'a, 'b> -> 
       {value is map<'a, 'b>, 
        update is (map<'a, 'b> -> map<'a, 'b>) -> ()} = 
   (val = atom init;
    cpy = atom init;
    wrt = atom false;
    lock = new Object();
    {
        get value () = 
            if wrt.value then copy cpy.value 
            else copy val.value 
            fi,

        update fn =
           (synchronized lock do:
                cpy.value := val.value;
                wrt.value := true;
                val.value := fn val.value;
                wrt.value := false;
            done)
    });

/**
 * Group: Thread
 * Creates a general-purpose mailbox for thread-safe 
 * message passing.
 *
 * Description:
 * This mailbox is basically a blocking queue.  The 
 * function returns a struct with send, receive and 
 * messageList function members.  mailbox.send pushes 
 * a single value onto the mailbox. mailbox.receive
 * either pops a message off of the mailbox, or blocks
 * until it has one.  mailbox.messageList will return
 * a lazy list of the mailbox's future contents, blocking
 * on the tail if needed.
 *
 * Examples:
 * : mb = mailbox (); // makes a new mailbox
 * : Some v |> mb.send; // sends a message onto the mailbox
 * : u = mb.receive (); // receives a message from the mailbox
 * : for (mb.messageList ()) do msg: ... done;
 * :   // the above is useful if you wish to process everything
 * :   // that comes through the mailbox without any possibility
 * :   // of stoping (save from doing something especially thread-unsafe).  
 * :   // You aught not do this unless you know what you're doing.
 */
mailbox () =
   (var queue = array [];
    fill = new Semaphore(0, true);
    {
        send v =
           (synchronized queue do: push queue v done;
            fill#release()),

        receive () = 
           (fill#acquire();
            synchronized queue do:
                res    = head queue;
                queue := tail queue |> array;
                res
            done),

        messageList () = receive () :. \(messageList ())
    });

/**
 * Group: Thread
 * Creates a thread that receives messages and does something
 * useful with them.
 *
 * Arguments:
 * reaction - the function to apply each message to.
 * ex - the ExecutorService that the reactor will run under.
 *
 * Description:
 * A reactor will wait until a message is sent to it, and then
 * it will do whatever you want it to do with that message.
 * It can be used much in the same way as Erlang's actors,
 * however, it is not an isolated process.
 *
 * Examples:
 * A reactor:
 * : actorKinda = reactor myPool
 * :    \case of
 * :         Some n: // do something with n
 * :         None  : // do something with none
 * :         Stop _: // handle a stop condition
 * :         _:      // this is something useless, ignore it?
 * :     esac;
 *
 * You send a message like this:
 * : Some val |> actorKinda // sends a message to reactor
 *
 * Reactors will continue to process messages until you 
 * shut down your pool:
 * : killAll myPool 1; // shuts down pool with a 1 second timeout,
 * :                   // effectively killing the reactor.
 *
 * Or if you wish for the reactor to shut itself down, you can
 * define it like this:
 * : sadActor = reactor myPool
 * :    \case of
 * :         BeHappy _: println "I can't!";
 * :         BeSad _:   println "Go away!";
 * :         StopIt _: (println "FINE!!"; interruptMyself ());
 * :     esac;
 *
 * Thereby, sending the reactor a StopIt message will cause it to 
 * halt and die, essentially making it useless:
 * : > BeHappy () |> sadActor
 * : I can't!
 * : > BeSad () |> sadActor
 * : Go away!
 * : > StopIt () |> sadActor
 * : FINE!!
 * : > BeHappy () |> sadActor
 * : > BeSad () |> sadActor
 * : > Wtf () |> sadActor
 *
 * As you can see, telling a sadActor to stop it will make it
 * unresponsive.
 */
// reactor ex reaction is ~ExecutorService -> ('a -> ()) -> 'a -> () =
// I want to be able to offer the option of having a reactor run in
// a user's own executor service, but simpleReactor won't compile.
reactor reaction = 
   (mb = mailbox ();
    th = runnable \((not Thread#interrupted()) loop 
                        (mb.receive () |> reaction));
    futurePool#execute(th);
    do msg: mb.send msg done);

/**
 * Group: Thread
 * A simple way to create a reactor running in the internal
 * thread pool.
 */
// simpleReactor = reactor futurePool;
// somehow doesn't compile for now...

/**
 * Group: Thread
 * Causes the current thread to yield it's time to other threads.
 *
 * Arguments:
 * () - yield is a thunk that calls Thread.yield()
 */
yield = \(Thread#yield());

callable fn = 
   (class Call extends Callable
        Object call()
            fn () |>  (unsafely_as ~Object)
    end;
    new Call());

/**
 * Group: Thread
 * Creates a future that will run a closed computation in
 * a new thread.  It will yield a value when touched.
 *
 * Arguments:
 * comp - a thunk that yields a value when run
 * 
 * Examples:
 * : theFuture = future someLongRunningComputation 30000
 * : // ... do some other things in the meantime ...
 * : res = theFuture () // this will touch the future
 *
 * Description:
 * This will take a lazy process and run it in a background
 * thread.  Futures are not isolated, yet, so be careful that
 * the computation you hand it doesn't have any side-effects.
 * Touching the future while it is still running will cause 
 * your current thread to join it before handing back the 
 * value, otherwise it will yield the value immediately.
 */
// futures don't work as of yet..
future proc is (() -> 'a) -> (() -> 'a) = 
   (fute = futurePool#submit(callable proc);
    \(fute#get() unsafely_as 'a));

{atom, reference, mailbox, reactor, //simpleReactor, 
 pool, killAll, simplyKillAll, interruptMyself, 
 yield, future}
