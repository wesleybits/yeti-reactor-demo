program Test;

import java.util.Random;
load yeti.util.reactor;

serviced = atom 0;
left     = atom 0;
waiting  = array [] |> reference;

barber = reactor
   (rdn = new Random();
    rand n = rdn#nextInt(n);
   \case of
    Cut _:  if empty? waiting.value then
                yield ()
            else
                println "[b] cutting hair of \(head waiting.value)";
                waiting.update (array . tail);
                serviced.value := serviced.value + 1;
                rand 400 |> (+100) |> (/1000) |> sleep
            fi;
    Stop _: (println "[b] quitting for today";
             interruptMyself ());
    msg:    println "[b] What to do with \(msg)?";
    esac);

shop = reactor
   \case of
    Enter c:    if length waiting.value >= 3 then
                    println "[s] shop is full, \(c) goes somewhere else";
                    left.value := left.value + 1
                else
                    println "[s] \(c) takes a seat and waits";
                    waiting.update do q: push q c; q done;
                    Cut () |> barber
                fi;
    Stop _:    (println "[s] closing for today";
                interruptMyself ());
    msg:        println "[s] What do to with \(msg)?";
    esac;

rdn = new Random();
rand n = rdn#nextInt(n);
for [1..50] do n:
    println "[c] \(n) enters shop";
    Enter n |> shop;
    rand 100 |> (+200) |> (/1000) |> sleep
done;
Stop () |> barber;
Stop () |> shop;
sleep 2;
println "[report] \n\
    "   \(serviced.value) got haircuts \n\
    "   \(left.value) went somewhere else \n\
    "   \(serviced.value + left.value) total came by"; // end barbershop

sillyProc x =
   (sleep 1;
    x + 1);

println "--- \nThis should take under 2 seconds...";
theFuture = \(sillyProc 3) |> future;
println "\((sillyProc 3) + (theFuture ()))";
_ = simplyKillAll ()
